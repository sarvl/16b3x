[TABLE OF CONTENTS]
	[OVERVIEW]
	[INSTRUCTION_OVERVIEW]
	[MEMORY_ACCESS]
	[INTERNAL_REGISTERS]
	[EXTERNAL_REGISTERS]
	[STACK]
	[STACK_FRAME]
	[CALLING_CONVETION]
	[EXTENDED_IMM]
	[DURING_EVERY_CYCLE]
	[FEATURE_FLAGS]
	[DETAILED_INSTRUCTION_EXPLANATION]

[OVERVIEW]
	version:           1 
	codename:          16b31
	endianness:        big endian
	architecture:      register-register
	instruction-limit: 63
	instruction-count: 44
	this doc revision:  2 
	
	all potential future version WILL BE backwards compatible with previous versions 
	note that instruction-limit and instruction-count treat instruction's formats as separate instructions
		even when 2 different formats behave exactly the same

	negative numbers are represented in Two's complement form
	
[INSTRUCTION_OVERVIEW]
	number in the opcode in hex
	fields with no instructions intentionally left blank
	 programs MUST NOT depend on their behavior since in the future the ISA may be extended
	
	00  nop                  	# ---
	01  hlt ccc              	# IF(FL & ccc) { halt } 
	02                       	# 
 	03                       	# 
 	04                       	# 
	05  mov     Rd, Rs/imm8 	# Rd <-- Rs/imm16
	06  rdm     Rd, Rs/imm8 	# Rd <-- M[Rs/imm16]
	07  wrm     Rd, Rs/imm8 	# M[Rs/imm16] <-- Rd
	08                      	# 
	09                      	#  
 	0A                      	# 
 	0B                      	#  
	0C  rdx     Rd, Es       	# Rd <-- Es      
	0D  wrx     Ed, Rs/imm8 	# Ed <-- Rs/imm16
	0E  psh     Rd          	# SP <-- SP - 2 ; M[SP] <-- Rd
	0F  pop     Rd          	# Rd <-- M[SP]  ; SP    <-- SP + 2;
	10M mul     Rd, Rs/imm8 	# Rd <-- Rd * Rs/imm16
	11  cmp     Rd, Rs/imm8 	# Rd - Rs/imm16 
	12                      	#  
	13  tst     Rd, Rs/imm8 	# Rd & Rs/imm16 
	14  jmp ccc     Rs/imm8 	# IF(FL & ccc) { IP <-- Rd/imm16 }
	15  cal ccc     Rs/imm8 	# IF(FL & ccc) { LR <-- IP; IP <-- Rd/imm16 }
	16  ret ccc             	# IF(FL & ccc) { IP <-- LR }
 	17                          # 
	18  add     Rd, Rs/imm8 	# Rd <-- Rd +  Rs/imm16
	19  sub     Rd, Rs/imm8 	# Rd <-- Rd -  Rs/imm16
	1A  not     Rd, Rs/imm8 	# Rd <--    ~  Rs/imm16
	1B  and     Rd, Rs/imm8 	# Rd <-- Rd &  Rs/imm16
	1C  orr     Rd, Rs/imm8 	# Rd <-- Rd |  Rs/imm16
	1D  xor     Rd, Rs/imm8 	# Rd <-- Rd ^  Rs/imm16
	1E  sll     Rd, Rs/imm4 	# Rd <-- Rd << Rs/imm4
	1F  slr     Rd, Rs/imm4 	# Rd <-- Rd >> Rs/imm4
 
	where:
	M[x] means memory at address x
	Rx   means value of register x
	Ex   means value of external register x
	special names denote external registers, see [EXTERNAL_REGISTERS]
	
	note that instructins that use imm8 have imm16 in behavior description
	 this is not a mistake see [EXTERNAL_REGISTERS] about register UI and see [EXTENDED_IMM]
	
	first operand of WRX is id of external register
	 this is not consistent with RDX, RDM and WRM, this enables loading external register with constant value

	for more detailed explanation see [DETAILED_INSTRUCTION_EXPLANATION] 
	for instruction encoding see [INSTRUCTION_ENCODING]

	letter after a number (eg 10M) means that this feature requires flag to be set
	see [DETAILED_INSTRUCTION_EXPLANATION] about that instruction
	for general info about feature flags see [FEATURE_FLAGS]

[MEMORY_ACCESS]
	memory is byte addressed
	RDM, WRM, PSH, POP require memory address to be 2B aligned 
	the exact way of handling unaligned memory access is implementation specific
	instructions must be 2B aligned

	JMP, CAL, RET do not require address to be 2B aligned even though they modify IP 
	 for explanation see [EXTERNAL_REGISTERS] about IP 

[INSTRUCTION_ENCODING]
	each instruction is 16bits long 
	there are two instructions format, R-format and I-format
	I-format specifies how instructions that use immiediate value as its second operand are encoded
	R-format specifies all the other instructions
	note that some instructions are valid in both formats (eg instruction doesnt have second operand)
	if thats the case then both formats may be used 
	
	opcodes for both versions of instruction are the same for all formats, what differs is their location 
	
	R-format:
		00000BBB CCCDDDDD
		
		from MSb to LSb:
		     5 bits are 0 
		then 3 bits denote Rd/ccc/Ed
		then 3 bits denote Rs/Es
		then 5 bits denote opcode
	
	
	I-format:
		AAAAABBB IIIIIIII
	
		from MSb to LSb
		     5 bits denote opcode
		then 3 bits denote Rd/ccc/Ed
		then 8 bits denote imm8
	
		if instruction uses imm4 instead of imm8 then 4LSb have to be used 
		
	
	instructions that use ccc are encoded as regular instructions except 3 condition bits are placed where R0 would be and those instructions do not care about R0
	if instruction doesnt have variant with immiediate and it uses only 1 register (1 condition code) then its behavior is the same in R-format and I-format
	if instruction doesnt have variant with immiediate and uses 2 registers then it DOES NOT HAVE imm format 

	for info how to set values of ccc see [EXTERNAL_REGISTERS] about FL	

	example:
		encoding of ADD R0, R4
		opcode for add: 18 ; in binary: 10100
		uses two registers so R-format 
		R0 is identified by 000
		R4 is identified by 100
	
		therefore encoding is 00000 000 100 10100 => 00000000 10010100 => x0094
	
		encoding of jmp E 5 
		opcode for jmp: 10 ; in binary : 10000
		uses ccc and immiediate therefore I-format
		E is ccc encoded to 010 
		5 in binary is 101 ; extended to 8 bits 00000101
	
		therefore encoding is 10000 010 00000101  => 10000010 00000101 => x8205
	
	
[INTERNAL_REGISTERS]
	0 R0 ; GP 0 
	1 R1 ; GP 1  
	2 R2 ; GP 2  
	3 R3 ; GP 3  
	4 R4 ; GP 4  
	5 R5 ; GP 5  
	6 R6 ; GP 6  
	7 R7 ; GP 7  

	any register can be used in any place where Rd or Rs is used in instruction description
	all internal registers are 0 initialized

[EXTERNAL_REGISTERS]
	0 IP ; Instruction Pointer ; points to NEXT instruction 
	1 SP ; Stack Pointer       ; points to bottom of the stack, where an object exists see [STACK]
	2 LR ; Link register       ; points to return address of call, specifically next instruction after CAL see [CALLING_CONVENTION]
	3
	4 UI ; Upper Immiediate    ; 8 LSbits denote 8 MSb of imm16 when instruction uses imm8, see [EXTENDED_IMM] 
	5 FL ; Flags register      ; 3 LSbits of this register denote flags set by previous instruction 
	6 
	7 CF ; CPU feature flags   ; each bit denotes whether an extension is present or not see [FEATURE_FLAGS]

	all external registers are 0 initialized with the exception of:
		FL, that has exactly 1 flag bit set 
		CF, that has flag bits set depending on the features of CPU
	
	IP
		points to instruction to be executed, NOT the currently executed one 
		may be modified by:
			JMP, CAL, RET, WRX
		
		note that actual value of the register denotes next instruction NOT where it is in memory 
		it means that before accessing memory the value is shifted by 1 to the left 
		the rationale is to allow wider range of addresses to be specified using just 8bits

	SP
		see [STACK], [STACK_FRAME]

		may be modified by
			PSH, POP, WRX
	
	LR
		contains the address to return 
		CAL uses this register to save return address (value of IP) 
		used by RET to jmp to correct instruction 
		see [CALLING_CONVENTION]

		may be modified by 
			CAL, WRX
	
	UI
		used by any instruction that uses immiediate
		value set at instruction n will take effect at instruction n + 1 and after instruction n + 1 UI is set back to 0 

		may be modified by 
			WRX
	
		see [EXTENDED_IMM]
	
	FL 
		contains 3 flag bits
		00000000 00000LEG
		 L - result < 0, that is MSb = 1
		 E - result = 0, that is all bits = 0
		 G - result > 0, that is L = 0 and E = 0
	
		architecture must support at least these 3 bits to be read and written
		write/read from other bits does not have to have an effect 
	
		initial value is not specified but is valid (meaning that one and only one flag bit is 1)
		at any point it *can* be assumed that exactly one bit is 1, however it does not *have* to be assumed 
		EVEN IF it is not actually 1 bit because of write with wrx
		for example, after WRX FL, 0  it can be still assumed that JMP LEG loop will jump to loop
		however after the same write, instruction sequence JMP L loop ; JMP E loop, JMP G loop may not jump to loop
	
		set by
			MUL, CMP, TST, ADD, SUB, NOT, AND, ORR, XOR 

	CF
		see [FEATURE_FLAGS]

		note that this register was not present in first version of CPU
		therefore reading from it may not return x0000

		reading from this register will return 16 flags 
		writing to this register must not have an effect
	
[STACK]
	controlled by SP via PSH and POP or manually with RDX, WRX, RDM, WRM, ADD, SUB
	stack MUST be 2B aligned 

	SP points to the data on top of the stack NOT where that data would go 
	in other words, PSH first decreases SP then puts data, POP first gets data then increases SP 

	local variables can be easily accessed by WRS and RDS, if those instructions are supported

[STACK_FRAME]
	arguments passed to procedure A by procedure B are considered part of procedure B's stack frame
	local variables saved on stack by B are considered part of stack frame of B

	each procedure MUST clear its stack frame, via POP or directly modyfing SP

	for details on stack see [STACK]

[CALLING_CONVETION]
	R0       - return value
	R0 to R7 - arguments
	more arguments are put on stack in order, where first POPed argument must be the next argument after R7
	in other words, last argument is PSHed first 
	
	every register is caller saved
	
	return address is put into LR by CAL, in order to call procedure B inside procedure A, A must first save the LR register
	it is advised that unless A is leaf then PSHing LR is the first thing done in the procedure 
	
	see [STACK_FRAME] for details on what is considered part of stack frame of procedure
	
	it is advised to use CAL and RET for procedure calls but it is not necessary as their behavior can be achieved with RDX, WRX and JMP

	
[EXTENDED_IMM]
	wherever instruction uses imm16 and only imm8 was specified 
	the process of getting imm16 is as follows 
	(UI << 8) | imm8 

	UI can be set via WRX, it is advised that assembler itself will convert any use of imm greater than 8 bits into 2 instructions 
	eg
		MOV 	R0, 513
		gets turned into
		WRX 	UI, 2
		MOV 	R0, 1
		which is equivalent to 
		MOV 	R0, 2
		SHL 	R0, 8
		ORR 	R0, 1 


[DURING_EVERY_CYCLE]
	actions here happen at every cycle, independent (unless stated otherwise) of instruction specified 

	IP <-- IP + 1 ; unless executed instruction changes it 
	UI <-- 0      ; unless executed instruction changes it 

[FEATURE_FLAGS]
	some instructions may not be present on particular implementations of the ISA 
	therefore it is necessary to be able to tell whether program is able to use it or not 

	any instruction that has flag near its name MAY NOT BE PRESENT 

	reading from CF (see [EXTERNAL_REGISTERS]) will result in 16bits flag array
	flags from MSb to LSb:
		0000 0000 0000 00SM

		M - MUL, if present MUL instruction is supported
		S - STK, if present WRS and RDS instructions are supported
		

[DETAILED_INSTRUCTION_EXPLANATION]

	NOP
		processor does nothing except what is done [DURING_EVERY_CYCLE] 
		external registers altered:
			---

	HLT ccc
		IF(FL & ccc) 
		{
			halt
		}

		ccc = 0b111 ALWAYS means halt
		ccc = 0b000 ALWAYS means nop 
		indepenent of FL value, see [EXTERNAL_REGISTERS] about FL 

		conditionally stops execution of the processor
		once stopped there is no way to resume it other than to restart it

		external registers altered:
			---
	
	MOV Rd, Rs/imm8
		Rd <-- Rs/imm16

		copies second operand into Rd

		external registers altered:
			---

	RDM Rd, Rs/imm8
		Rd <-- M[Rs/imm16]

		copies contents of memory pointed to by second operand into Rd

		external registers altered:
			---

	WRM Rd, Rs/imm8
		M[Rs/imm16] <-- Rd
		
		copies contents of Rd into memory pointed to by second operand  

		external registers altered:
			---
	
	RDX Rd, E0
		E0 <-- Rd

		copies contents of external register E0 into Rd

		external registers altered:
			---

	WRX E0, Rs/imm16
		E0 <-- Rs/imm16
		
		copies second operand into external register E0

		external registers altered:
			E0, possibly any one

	PSH Rd          	
		SP <-- SP - 2
		M[SP] <-- Rd

		decreases SP by 2 
		THEN
		copies contents of Rd into memory at address held by SP

		
		external registers altered:
			SP

	POP Rd
		Rd <-- M[SP]
		SP <-- SP + 2;

		copies contents of memory at address held by SP
		THEN
		increases SP by 2


		external registers altered:
			SP

	JMP ccc Rs/imm8
		IF(FL & ccc) 
		{ 
			IP <-- Rd/imm16
		}

		ccc = 0b111 ALWAYS means jump 
		ccc = 0b000 ALWAYS means nop 
		indepenent of FL value, see [EXTERNAL_REGISTERS] about FL 

		if flags register anded with condition codes yields nonzero value
			changes the IP to second operand 

		external registers altered:
			IP if condition is true 

	CAL ccc Rs/imm8
		IF(FL & ccc) 
		{ 
			LR <-- IP
			IP <-- Rd/imm16 
		}

		ccc = 0b111 ALWAYS means call 
		ccc = 0b000 ALWAYS means nop 
		indepenent of FL value, see [EXTERNAL_REGISTERS] about FL 
		
		if flags register anded with condition codes yields non zero value
			saves value of IP into LR
			THEN
			changes the IP to either contents of Rd or extended immiediate

		external registers altered:
			LR and IP if condition is true 

	RET ccc
		IF(FL & ccc) 
		{ 
			IP <-- LR
		}

		ccc = 0b111 ALWAYS means return 
		ccc = 0b000 ALWAYS means nop 
		indepenent of FL value, see [EXTERNAL_REGISTERS] about FL 
        
		if flags register anded with condition codes yields non zero value
			changes IP to LR	

		external registers altered:
			IP if condition is true
	
	MUL Rd, Rs/imm8
		Rd <-- Rd * Rs/imm16

		performs UNSIGNED multiplication on the operands
		result is truncated to 16bits 

		requiers M flag to be set in CF register
		see [EXTERNAL_REGISTERS] about CF
		see [FEATURE_FLAGS]
		
		external registers altered:
			FL

	CMP Rd, Rs/imm8
		Rd - Rs/imm16
	
		acts like SUB
		except doesnt write to register
		operates on signed numbers

		external registers altered:
			FL

	TST Rd, Rs/imm8
		Rd & Rs/imm16
		
		acts like AND 
		except doesnt write to register

		external registers altered:
			FL

	ADD Rd, Rs/imm8
		Rd <-- Rd +  Rs/imm16

		performs arithmetic addition on the operands
		stores result in Rd

		external registers altered:
			FL
	
	SUB Rd, Rs/imm8
		Rd <-- Rd +  Rs/imm16

		performs arithmetic subtraction on the operands
		stores result in Rd

		external registers altered:
			FL

	NOT Rd, Rs/imm8
		Rd <-- ~ Rs/imm16

		performs logical not on second operand 
		stores result in Rd

		external registers altered:
			FL

	AND Rd, Rs/imm8
		Rd <-- Rd &  Rs/imm16

		performs logical and on the operands
		stores result in Rd

		external registers altered:
			FL

	ORR Rd, Rs/imm8
		Rd <-- Rd |  Rs/imm16

		performs logical or on the operands
		stores result in Rd

		external registers altered:
			FL

	XOR Rd, Rs/imm8
		Rd <-- Rd ^  Rs/imm16

		performs logical xor on the operands
		stores result in Rd

		external registers altered:
			FL

	SLL Rd, Rs/imm4
		Rd <-- Rd << Rs/imm4

		performs logical shift left on the operands
		stores result in Rd
		
		only 4LSb of second operand matter
		the rest are ignored

		external registers altered:
			FL

	SLR Rd, Rs/imm4
		Rd <-- Rd >> Rs/imm4

		performs logical shift right on the operands
		stores result in Rd

		only 4LSb of second operand matter
		the rest are ignored

		external registers altered:
			FL
